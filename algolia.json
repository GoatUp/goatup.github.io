[{"categories":[],"content":"? ","date":"2021-08-01","objectID":"/about/:0:0","tags":[],"title":"About","uri":"/about/"},{"categories":["Japan"],"content":"体言与用言的概念 简单而言，体言没有词尾变化和活用，而用言有词尾变化和活用的。 例如“中学为体，西学为用”，在日语里就是，用言修饰体言。 体言包括：名词、代名词、数词 用言包括：动词、形容词、形容动词 ","date":"2021-07-26","objectID":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/:1:0","tags":["Japanese Tips"],"title":"日語小知識","uri":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/"},{"categories":["Japan"],"content":"「です」和「ます」的区别 「です」永远是前接名词、形容词或形容动词。例如：先生です、寒いです、きれいです 「ます」只属于动词。例如：働きます、勉強します、食べます 休みです。 # 这里的「休み」是名词所以跟「です」结句 休みます。 # 这里是「休み」的「ます」形 二者意思一样。但第一句强调的是一种状态，及客观性的陈述事实。第二句是动作行为，是人为主观去做。 ","date":"2021-07-26","objectID":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/:2:0","tags":["Japanese Tips"],"title":"日語小知識","uri":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/"},{"categories":["Japan"],"content":"「月」到底是「がつ」？「げつ」？还是「つき」？ 「月」的音读有两个：①げつ➁がつ，训读有一个：①つき ","date":"2021-07-26","objectID":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/:3:0","tags":["Japanese Tips"],"title":"日語小知識","uri":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/"},{"categories":["Japan"],"content":"一、げつ 一般和其他汉字连用的时候 ①月亮；月光； ② 月份； ③几个月。 残月⇒ざんげつ 今月⇒こんげつ 一か月 ⇒ いっかげつ 新月⇒しんげつ 月額⇒げつがく 二か月 ⇒ にかげつ 満月⇒まんげつ 月刊⇒げっかん 三か月 ⇒ さんかげつ 名月⇒めいげつ 月給⇒げっきゅう … 月光⇒げっこう 月産⇒げっさん ","date":"2021-07-26","objectID":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/:3:1","tags":["Japanese Tips"],"title":"日語小知識","uri":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/"},{"categories":["Japan"],"content":"二、がつ 主要再说几月份的时候用 ","date":"2021-07-26","objectID":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/:3:2","tags":["Japanese Tips"],"title":"日語小知識","uri":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/"},{"categories":["Japan"],"content":"三、つき 单个日语汉字使用时 「今晩は月がきれいですね。」 ","date":"2021-07-26","objectID":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/:3:3","tags":["Japanese Tips"],"title":"日語小知識","uri":"/%E6%97%A5%E8%AA%9E%E5%B0%8F%E7%9F%A5%E8%AD%98/"},{"categories":["Japan"],"content":"0 ~ N5　みんなの日本語初級Ⅰ第２版 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:0:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"预备课 ​ 大致设定的目标为每课4~6小时，全部学完约为150小时。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:1:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"日语的特点 词类：日语的词类有动词、形容词、名词、副词、接续词、助词等。 语序：位于放在句尾。修饰词放在被修饰词前。 谓语：日语可以作谓语的有动词、形容词、名词 + です（だ）。谓语会因是肯定还是否定、或是过去还是非过去等发生形态变化。日语中没有因人称、性、数而引起的变化。 助词：在词汇或句子后使用。助词用以表示词语与词语之间的关系，还可以表达各种附加意思。 省略：主语或宾语在根据上下文关系可以清楚所指示往往被省略。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:1:1","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"日语的文字 ​ 日本的文字分为三种，有平假名、片假名和汉字。 ​ 平假名和片假名是表音文字。汉字为表意文字，在表音的同时也表意。 ​ 日语在同一个句子中可以都使用。外国的人名、地名和外来语都用片假名书写。平假名可以用来表记助词以及动词、形容词的活用部分。 田中さんはミラさんとデパートへ行きます。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:1:2","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"五十音图 平假名 片假名 平假名浊音和拗音 片假名浊音和拗音 假名和拍节 ​ 所谓拍节是日语音韵的单位，一节相当于一个假名（拗音为两个字母）发音的长度。 ​ 日语有あ、い、う、え、お这五个母音，除单独使用外还可以在前面加上子音或字音和半母音（y）构成一个音节。 长母音 ​ 发音为两拍。平假名直接加母音，片假名使用长音符号「ー」。 拨音 ​ 「ん」不出现在词头。发音为一拍。 促音 ​ 「っ」发音为一拍，出现在「か行」「さ行」「た行」「ぱ行」音之前。 拗音 ​ 发音为一拍。带有小假名「ゃ」「ゅ」「ょ」。 重音 ​ 日语是有高低重音的语言，重音分为4个类型。 ​ 标准发音第一拍和第二拍的高低音调不同，且一旦降调就不会再转为升调。 0型 1型 2型 3型 私（わたし） 家族（かぞく） 果物（くだもの） 冷たい（つめたい） 花（はな） 天気（てんき） 赤い（あかい） お手洗い（おてあらい） 学生（がくせい） 本（ほん） 匂い（におい） 一昨日（おととい） 音调 ​ 音调有平调、升调、降调三种类型。 ​ 疑问句为升调，其他句子多用平调，但在表示同意或失望的语气时也有用降调的时候。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:1:3","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"1．初めまして ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:2:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"単語 私・あらた・あの人／あの方・だれ／どなた？ サラリーマン　「毎月給料を貰って、それで生活をしている人のこと」 会社員　「会社に勤めている人のこと」 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:2:1","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"文法 ＊＊は＊＊です。 ＊＊じゃ（では）ありません。 # 「です」否定型 ＊＊か。 # 疑问句 ＊＊も＊＊です。 # 将相同的事物作为前提加以陈述 总结：本课讲述了肯定、否定和疑问句，学习初次见面打招呼。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:2:2","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"２．これからお世話にあります ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:3:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"単語 机　「目的：事務、勉強／人数：一人で使う／特徴：引き出しがついている」 テーブル　「目的：食事、会議／人数：複数人で使う／特徴：引き出しがない」 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:3:1","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"文法 これ・それ・あれ・どれ？ この～・その～・あの～・どの～ ここ・そこ・あそこ・どこ ＊＊か、＊＊か。 # 两个以上并列的疑问句 そうです・違います。 总结：本课讲述了对东西的指代，以及初次拜访会话。 「お世話になっております。」 # 我们负载累累 这句话适用于已经达成意向或交易时使用，对于初次往来建议使用「初めてメールを送らせていただきます」「突然のご連絡で、失礼いたします」。 「こちらこそ」 # 彼此彼此 用于在对方表达道歉或感谢以及问候时，自己传达同样的信息。例如：「こちらこそありがとうございます」「こちらこそ申し訳ございません」「こちらこそご挨拶が遅れまして」 「よろしくお願いいたします」 # 谢谢 「よろしく」有“适当、适度”的意思，还有在向对方示好或提出要求时所加的用法。「よろしくお願いいたします」则是更礼貌的说法。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:3:2","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"３．これをください ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:4:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"単語 部屋② ロビー① ＊＊売り場 エレベーター エスカレーター お手洗い 移動販売機 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:4:1","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"文法 ここ・そこ・あそこ・どこ？ # 场所 こちら・そちら・あちら・どちら？ # 方向、场所（郑重） ＊＊は＊＊です。 # 可用来表示物体、场所、人等存在的场所 ＊＊を見せてください。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:4:2","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"４．こちらは何時までですか ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:5:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"単語 一昨日・昨日・今日（今朝・今晩）・明日・明後日 朝・昼・午前・正午・午後・晩・夜 春休み・夏休み・冬休み いろいろ時間 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:5:1","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"文法 ます・ました・ません・ませんでした ＊＊に＊＊ ＃ 表示动作进行的时间 ＊＊から＊＊まで　# 表示时间、场所的始终，也可单独使用 ＊＊ね ＃ 接在句尾，表示希望得到听话人回应的预期 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:5:2","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"５．この電車は甲子園へ行きますか ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:6:0","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"単語 普通・急行・特急・各停・次の 彼・彼氏・彼女 毎週・毎月・毎年 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:6:1","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["Japan"],"content":"文法 ＊＊へ　行きます・来ます・帰ります　＃ 发音e，表示动作移动的方向 ＊＊で　行きます・来ます・帰ります　＃ 表示方式、方法、手段，翻译为使用、乘坐 ＃ 疑问词 + も + 否定 = 完全否定 いつ　＃ いつ日本へ来ましたか。 ","date":"2021-07-24","objectID":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/:6:2","tags":["Minna No Nihongo"],"title":"みんなの日本語 初級Ⅰ","uri":"/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E-%E5%88%9D%E7%B4%9A/"},{"categories":["SQL"],"content":"There are five types of SQL commands: DDL, DML, DCL, TCL, and DQL. ","date":"2021-07-14","objectID":"/sql-commands/:0:0","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["SQL"],"content":"第1章 SQL 命令类型 ","date":"2021-07-14","objectID":"/sql-commands/:1:0","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["SQL"],"content":"1.1 数据定义语言- Data Definition Language - DDL DDL 更改表的结构，例如创建表、删除表、更改表等。 DDL 的所有命令都是自动提交的，这意味着它将永久保存数据库中的所有更改。 Systax CREATETABLEtable_name(column_namedatatype[,....]);DROPTABLEtable_name;#dropanexistingtableinadatabaseALTERTABLEtable_nameADD/MODIFYcolumn_namedatatype;TRUNCATETABLEtable_name;#deletethedatabutnotthetableitself ","date":"2021-07-14","objectID":"/sql-commands/:1:1","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["SQL"],"content":"1.2 数据操作语言 - Data Manipulation Language - DML DML 命令用于修改数据库。它负责数据库中所有形式的更改。 DML 的命令不是自动提交的，这意味着它不能永久保存数据库中的所有更改。它们可以回滚。 Systax INSERTINTOtable_name[(col1,col2),....]VALUES(value1,value2,....);UPDATEtable_nameSET[column_name1=value1,...column_nameN=valueN][WHERECONDITION]DELETEFROMtable_name[WHEREcondition]; ","date":"2021-07-14","objectID":"/sql-commands/:1:2","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["SQL"],"content":"1.3 数据控制语言 - Data Control Language -DCL DCL 命令用于对任何数据库用户授予和收回权限。 Systax GRANTprivilegesONobjectTOuser;REVOKEprivilegesONobjectFROMuser; | Privilege | Description | | :-------: |-------------| | SELECT |Ability to perform SELECT statements on the table.| | INSERT |Ability to perform INSERT statements on the table.| | UPDATE |Ability to perform UPDATE statements on the table.| | DELETE |Ability to perform DELETE statements on the table.| |REFERENCES |Ability to create a constraint that refers to the table.| | ALTER |Ability to perform ALTER TABLE statements to change the table definition.| | ALL |ALL does not grant all permissions for the table. Rather, it grants the ANSI-92 permissions which are SELECT, INSERT, UPDATE, DELETE, and REFERENCES.| ","date":"2021-07-14","objectID":"/sql-commands/:1:3","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["SQL"],"content":"1.4 事务控制语言 - Transaction Control Language - TCL TCL 命令只能与 DML 命令一起使用，例如 INSERT、DELETE 和 UPDATE。 Systax COMMIT;ROLLBACK;SAVEPOINTsavepoint_name; ","date":"2021-07-14","objectID":"/sql-commands/:1:4","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["SQL"],"content":"1.5 数据查询语言 - Data Query Language - DQL DQL 用于从数据库中获取数据。 Systax SELECTcolumn_nameFROMtable_nameWHEREcondition; ","date":"2021-07-14","objectID":"/sql-commands/:1:5","tags":["Command"],"title":"SQL Commands","uri":"/sql-commands/"},{"categories":["Salesforce"],"content":"Visualforce is a framework that allows developers to build sophisticated, custom user interfaces that can be hosted natively on the Lightning platform. ","date":"2021-07-12","objectID":"/salesforce-visualforce/:0:0","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"Part 1 What is Visualforce？ Visualforce 框架包括一种类似于 HTML 的基于标签的标记语言，以及一组服务器端“标准控制器”，它们使基本的数据库操作（例如查询和保存）非常容易执行。 ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:0","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"1.1 Visualforce Components and Tags ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:1","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"1.2 What is Visualforce Page？ 开发人猿可以使用 Visualforce 创建 Visualforce 页面定义。页面定义由两个主要元素组成： Visualforce markup A Visualforce controller ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:2","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"Visualforce markup Visualforce markup 包括 Visualforce tags，HTML，JavaScript 和其他任意能嵌入到 apex:page 的标签。标记定义了页面的组件，以及显示的方式。 ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:3","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"Visualforce Controllers A Visualforce controller 是一组指令，用于控制用户与组件之间的交互动作。开发人猿可以使用 Lighting 平台提供的标准控制器，也可以使用 Apex 编写的类添加自定义控制器逻辑。 ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:4","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"1.3 Where Can Visualforce Pages Be Used? 开发人猿可以使用 Visualforce Page 来： 覆盖标准按钮，例如客户的新建按钮或联系人的编辑按钮 覆盖选项卡概览页面，例如“帐户”选项卡主页 定义自定义选项卡 在详细信息页面布局中嵌入组件 创建仪表板组件或自定义帮助页面 在 Salesforce 控制台中自定义、扩展或集成侧边栏（自定义控制台组件） 在 Salesforce 移动应用程序中添加导航菜单项和操作 ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:5","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"FAQ Q：page 修改后没反应？ A：检查 page controller 指向的页面是否正确，也可在 Apex クラス 中查询。 Q：添加查询功能时，多条件会报错？ A：仔细检查是否多或少一个 + 号。 ","date":"2021-07-12","objectID":"/salesforce-visualforce/:2:0","tags":["Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"第1章 构筑 Salesforce 开发环境 ","date":"2021-07-11","objectID":"/salesforce-dev/:1:0","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"1.1 VSCode 安装 点击 VSCode 下载 ","date":"2021-07-11","objectID":"/salesforce-dev/:1:1","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"1.2 Salesforce CLI 点击 Salesforce CLI 下载 ","date":"2021-07-11","objectID":"/salesforce-dev/:1:2","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"1.3 Salesforce Extensions for VSCode ","date":"2021-07-11","objectID":"/salesforce-dev/:1:3","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"1.4 安装语言包 非必需项 ","date":"2021-07-11","objectID":"/salesforce-dev/:1:4","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"1.5 JDK 安装 创建运行 Apex 项目时，需要 JVM 环境。 点击 JDK 下载后，在 VSCode 键入 \u003eOpen Setting，将对应的环境配置加到最后。 ","date":"2021-07-11","objectID":"/salesforce-dev/:1:5","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"第2章 连接 Salesforce 环境 以下操作均在 VSCode 中执行！ ","date":"2021-07-11","objectID":"/salesforce-dev/:2:0","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"2.1 Create Project with Manifest 下载、安装、配置完 VSCode 后， 键入 \u003esfdx Create Project with Manifest （可简写）； 选择 Standard Standard project template (default) 环境； 键入项目名称后选择项目文件夹。 ","date":"2021-07-11","objectID":"/salesforce-dev/:2:1","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"2.2 Authorize an Org 键入 \u003eAuthorize an Org ； 选择 Project Default 或 Production 均可； 回车并登录。 ","date":"2021-07-11","objectID":"/salesforce-dev/:2:2","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"2.3 差分工具 终端键入 \u003esfdx plugins:install @salesforce/sfdx-diff ","date":"2021-07-11","objectID":"/salesforce-dev/:2:3","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"扩展 VSCode 左下角可选择组织环境 ","date":"2021-07-11","objectID":"/salesforce-dev/:3:0","tags":["VSCode"],"title":"Salesforce Dev","uri":"/salesforce-dev/"},{"categories":["Salesforce"],"content":"Apex 是 Salesforce.com 开发的专有语言。类似于 Java 语法，也是一种强类型，面向对象的编程语言。允许开发人猿在 Salesforce 平台服务器上执行流和事务控制语句，并结合对 API 调用。 ","date":"2021-07-09","objectID":"/salesforce-apex/:0:0","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"Part 1 Apex の使用開始 了解 Apex 开发生命周期。按照分步教程创建 Apex 类和触发器，并将它们部署到生产环境。 ","date":"2021-07-09","objectID":"/salesforce-apex/:1:0","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"1.1 Apex の基本概念 Apex 代码通常包含许多我们可能从其他编程语言熟悉的东西。 变量声明：作为强类型语言，必须使用 Apex 中的数据类型声明每个变量。如下面的代码（下面的截图）所示，lstAcc 被声明为数据类型为帐户列表。 SOQL 查询：这将用于从 Salesforce 数据库获取数据。下面屏幕截图中显示的查询是从 Account 对象获取数据。 循环声明：此循环语句用于迭代一个列表或迭代一段代码指定的次数。在下面的屏幕截图中显示的代码中，迭代将与 lstAcc 中的记录数相同。 流控制语句：If 语句用于此代码中的流控制。基于特定条件，决定是执行还是停止执行特定代码段。例如，在下面显示的代码中，它检查列表是否为空或者它包含记录。 DML 语句：对数据库中的记录执行记录插入，更新，上升，删除操作。例如，以下代码正在使用新字段值更新帐户。 以下是 Apex 代码段的外观示例。我们将在本教程中进一步研究所有这些 Apex 编程概念。変数の命名： 小写字母开头，开头不能使用下划线 ‘_’ 驼峰命名法，比如 Integer stuNumber 不能使用任何 Apex 保留关键字 ","date":"2021-07-09","objectID":"/salesforce-apex/:1:1","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"1.2 Apex を使用する必要がある状況は？ 创建 Web 服务。 创建电子邮件服务。 对多个对象执行复杂的验证。 创建工作流不支持的复杂业务流程。 创建自定义事务逻辑（发生在整个事务中的逻辑，而不仅仅是单个记录或对象）。 将自定义逻辑附加到另一个操作（例如保存记录），以便在执行操作时发生该操作，无论它是源自用户界面、Visualforce 页面还是来自 SOAP API。 Apex 不能用于： 在用户界面中呈现除错误消息以外的元素 更改标准功能——Apex 只能阻止功能发生，或添加附加功能 创建临时文件 生成线程 ","date":"2021-07-09","objectID":"/salesforce-apex/:1:2","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"1.3 Apex はどのように机能しますか？ Apex 完全在 Lighting 平台上编译、存储和运行。开发人猿编写 Apex 代码并将其保存到平台，用户通过用户界面触发 Apex 代码的执行。 ","date":"2021-07-09","objectID":"/salesforce-apex/:1:3","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"1.4 Apex 开発プロセスとは? 要开发 Apex，请获取 Developer Edition 帐户，编写和测试您的代码，然后部署您的代码。 我们推荐以下流程来开发 Apex： 获取开发者版帐户。 了解有关 Apex 的更多信息。 写下你的 Apex。 在编写 Apex 时，您还应该编写测试。 可选择将您的 Apex 部署到沙盒组织并进行最终单元测试。 将您的 Apex 部署到您的 Salesforce 生产组织。 除了部署您的 Apex，在编写和测试之后，您还可以将您的类和触发器添加到 AppExchange 应用程序包中。 ","date":"2021-07-09","objectID":"/salesforce-apex/:1:4","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"1.5 Apex クイックスタート 本教程将展示如何创建简单的 Apex 类和触发器，以及如何将这些组件部署到生产组织。 新建自定义对象 添加 Apex Class 两种方法：一种是直接在 Apex Class 中新建，一种是通过第三方插件上传。 添加 Apex Trigger trigger ContactTrigger on Contact (after insert) { ContactTriggerHandler handler = new ContactTriggerHandler(); if (Trigger.isAfter) { if (Trigger.isInsert) { //　取引先責任者を登録時に取引先責任者件数を更新 handler.doUpdateContactCnt(Trigger.new); } } } ","date":"2021-07-09","objectID":"/salesforce-apex/:1:5","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"Part 2 Apex の作成 Apex 就像 Salesforce 的 Java。它可以在 Lighting 平台持久层中添加数据并与之交互。 ","date":"2021-07-09","objectID":"/salesforce-apex/:2:0","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"2.1 データ型および変数 Apex 和 SOAP API 使用相同的原始数据类型，如下： Apex Developer Guide | Primitive | Categories | Description | | :-------: | :-------------: | ---------------------------------------------------- | | Integer | 32-bit | Integer i = 1; | | ID | 16/18-character | ID id = '00300000003T2PGAA0'; | | Long | 64-bit | Long l = 12345678L; | | Double | 64-bit | Double d = 3.14159; | | Decimal | number | ? | | String | string | String s = 'lazy dog' | | Boolean | true/false/null | Boolean b = True; | | Blob | blob | Blob b = Blob.valueOf('Data'); | | Object | any data | ? | | Time | time | Time t = Time.newInstance(1,2,3,0); | | Date | day | Date d = Date.newInstance(1960,2,17); | | Datetime | datetime | Datetime dt = Datetime.newInstance(1960,2,17,1,2,3); | # 标准对象使用的是格林威治时间，自定义对象需调整 # Datetime = Datetime.now().addHours(9); ","date":"2021-07-09","objectID":"/salesforce-apex/:2:1","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"Part 3 Apex の実行 ","date":"2021-07-09","objectID":"/salesforce-apex/:3:0","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"3.1 Apex Trigger 类似传统数据库里的触发器。在 Salesforce 中，当对 Object 进行插入、更新、删除的操作的时候，会触发某些事件。 触发 时点 ，在 Salesforce 中有七个（2大类，before 和 after）： before insert before update before delete after insert after update after delete after undelete 例如，在需要设置触发器的地方进入对象编辑页面：然后点击 トリガ ，新建一个 Apex Trigger； 编写完成后勾选 is active即可。 推荐一个 Salesforce 插件：Salesforce DevTools，不过在 Lighting 模式下 debug 有 bug，只能在 Classic 中debug。点击 参照 ，然后在插件 Salesforce DevTools 中可查看 debug 内容。 而我们怎么确定是哪一个 时点 触发的呢？是 before insert 还是 after insert？这里我们可以通过13个内置变数判断。 isExecuting - isInsert - isUpdate - isDelete - isBefore - isAfter - isUndelete - new - newMap - old - oldMap - operationType - size trigger AccountTrigger on Account (before insert, after insert) { if (Trigger.isInsert) { if (Trigger.isBefore) { System.debug('this is the before trigger debug'); } else if (Trigger.isAfter) { System.debug('this is the after trigger debug'); } } else { System.debug('this is the error trigger debug'); } } ","date":"2021-07-09","objectID":"/salesforce-apex/:3:1","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"Part 4 Apex のデバック、テスト、リリース","date":"2021-07-09","objectID":"/salesforce-apex/:4:0","tags":["Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Windows"],"content":"fork 以空间换时间，统一开发环境的基础【防止手贱】。 ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:0:0","tags":["Chocolatey"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Windows"],"content":"安装 choco 以管理员权限运行 cmd 或 powershell cmd运行： @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" powershell运行： Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) 安装完成后，运行 choco 或 choco -? 检查是否安装正确。 ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:1:0","tags":["Chocolatey"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Windows"],"content":"choco 安装软件 以管理员权限运行 cmd 或 powershell 执行过程中会提示你是否接受软件的安装协议等，输入 -y，可免去这一步，如下： choco install \u003cpackagename\u003e -y # 或 cinst \u003cpackagename\u003e -y ​ 安装 JDK8： ​ choco install jdk8 ​ 安装 git： ​ cinst git.install ​ 安装chrome： ​ cinst googlechrome ​ 安装7-zip： ​ cinst 7zip.install ​ 更多安装包，请搜索这里： ​ Chocolatey Gallery | Packages ​ 其他用法： ​ cinst jdk8 googlechrome vscode 7zip //一次安装多个软件包 ​ cinst nodejs.install –version 0.10.35 //安装指定版本 ​ cinst dev-package.config //安装config文件内描述的所有软件包 ​ dev-package.config： \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cpackages\u003e \u003cpackage id=\"jdk8\" /\u003e \u003cpackage id=\"googlechrome\" version=\"71.0.3578.98\" /\u003e \u003cpackage id=\"vscode\" /\u003e \u003cpackage id=\"7zip\" /\u003e \u003c/packages\u003e ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:2:0","tags":["Chocolatey"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Windows"],"content":"安装报错 Error: Error building site: TOCSS: failed to transform “main.scss” 解决办法：你需要安装 Hugo 扩展包 choco install hugo-extended -y ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:3:0","tags":["Chocolatey"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Free-Ride"],"content":"fork ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:0:0","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"1 前言 云端，便捷，无限容量，稳定不跑路，免费最重要。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:1:0","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"1.1 整体架构 GitHub + Typora + PicGo ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:1:1","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"1.2 软件下载 略：太简单，自己去搜。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:1:2","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"2 GitHub 创个库，当作图床，取名困难就 image。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:2:0","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"2.1 获取令牌 也就是 Token，对外公钥，可访问API，步骤如下： Settings Developer settings Personal access tokens Generate new token Select scopes时，看不懂可全选。 生成的 Token 只显示一次。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:2:1","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"3 PicGo 安装后界面如下：对应设置即可；","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:3:0","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"4 Typora 自定义安装后，按图配置：","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:4:0","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"4.1 上传失败解决办法 换个IP，WIFI或4G Failed to fetch 时，修改 Server Port 为36677 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:4:1","tags":["Image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"fork ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:0:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"前言 云端，省事，不花钱，新鲜感过后低维护成本。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:1:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅰ 整体架构 GitHub Pages + Hugo + GitHub Actions + Domain ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:1:1","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅱ 工作流程 整个方案流程大致如下： 用 MarkDown 格式写作 推送文章源码至 Github 仓库 触发 Github Actions 并生成 HTML 静态文件发布到 Pages 进行托管 （可选）绑定自定义域名 博客编辑器推荐 Typora，域名注册和解析推荐 NameSoli，文章推送最好写个 deploy.bat。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:1:2","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"GitHub 创建仓库 推荐两种方式创建仓库（以我的 goatup 账号为例）： 直接把 goatup.github.io 作为远程仓库发布； 将源码、git pages、照片和其他资源分为多个仓库，例如： 源码： goatup.github.io.source //权限设为 private 页面： goatup.github.io //权限设为 public 照片： blog-images //图床 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅰ 创建 Github Pages 创建 goatup.github.io 仓库，仓库名必须为 [username].github.io，必须使用 main 分支，默认权限 Public： ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:1","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅱ 创建源码仓库 仓库名随意，分支随意，权限随意： ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:2","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅲ 为两个仓库绑定 SSH Key 当我们通过 Git 提交源码到 goatup.github.io.source ，Github Actions 会编译成静态文件并通过 Git Pull 到 goatup.github.io ，因此这一步需要 Git 账号认证。 # 打开 cmd, Powershell, git shell 任意一个，输入 ssh-keygen -t rsa -C \"your email address\" 这两步比较重要，我们要将生成的 Public Key 添加到 goatup.github.io 仓库，勾选可写权限：然后将 Private Key 添加到 goatup.github.io.source 仓库，这里 Secrets 变量名记住哈, 后面会用到。","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:3","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅳ 为 Hugo 初始化做准备 将 goatup.github.io.source 仓库克隆到本地，开始初始化 Hugo 系统。 # 选取一个目标 cd O:\\Documents\\ # 克隆 source 仓库 git clone git@github.com:username/goatup.github.io.source.git # 如果报错，则使用下面这条命令 git clone https://username:password@github.com/username/repo_name.git # 进入仓库 cd goatup.github.io.source ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:4","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Hugo初始化 使用 Hugo 生成静态博客站点非常简单，具体的步骤和用法可以参考官方文档的 Quick Start。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅰ 两种方式安装Hugo choco install hugo -y //用户需安装 Chocolatey 在 这个页面 选择适合的版本下载，然后设置 PATH 即可。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:1","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅱ 初始化 创建一个新的站点。 # 在当前目录生成 Hugo 源码 hugo new site . --force //在非空目录中初始化 ​ 这会生成一个特定目录结构的项目文件夹，用来维护所有的站点内容，后续的操作和命令都会在这个根目录下执行： . ├── archetypes # 内容类型，在创建新内容时自动生成内容的配置 ├── content # 网站内容，Markdown 文件 ├── data ├── layouts # 网站模版，选择主题后会将主题中的 layouts 文件夹中的内容复制到此文件夹中 ├── static # 包含 CSS、JavaScript、Fonts、media 等，决定网站的外观。选择主题后会将主题中的 ststic 文件夹中的内容复制到此文件夹中 ├── themes # 存放主题文件 └── config.toml # 网站的配置文件 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:2","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅲ 安装主题 你可以不执行这一命令使用默认主题。 安装主题有三种方式： 直接下载主题压缩文件，解压到 theme/ 目录下。 通过 git submodule(推荐) 或 git clone 安装： 通过 Hugo Modules 安装，需本机安装 GO 1.12 及以上版本，略。 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 安装后需要启用主题，方法是将主题名称写入到根目录下的默认配置文件 config.toml： echo 'theme = \"LoveIt\"' \u003e\u003e config.toml 或 cp themes/LoveIt/exampleSite/config.toml . #这里需要修改主题路径 themeDir 配置，将其注释掉 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:3","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅳ 启动 Hugo 预览服务器 Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。 hugo server -D 添加 -D 选项以输出草稿状态的文章，执行后可通过 http://localhost:1313/ 访问站点 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:4","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"通过 GitHub Pages 发布 此段为科普，帮助理解，可跳过。 这一步 Hugo 的官方文档在 Host on GitHub 中进行了详细的介绍，并且还很贴心的提供了自动化操作的 Shell 脚本。有两种方式： 通过个人主页发布：必须创建一个 \u003cUSERNAME\u003e.github.io 仓库来托管生成的静态内容，发布后的域名为 https://\u003cUSERNAME\u003e.github.io。 通过项目主页发布：可以随意创建 \u003cPROJECT_NAME\u003e 仓库，发布后的域名为 https://\u003cUSERNAME\u003e.github.io/\u003cPROJECT_NAME\u003e。 建议非特殊情况下使用第 1 种方式，原因是许多主题都不能很好的支持第 2 种，具体来说是将 config.toml 的 baseURL 设置为含子路径的地址时，不能正确的处理所有资源的构建位置。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:4:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"通过 GitHub Actions 自动部署 目前我们的「创作-发布」流程如下： 在项目仓库编辑原始内容并进行版本管理。 执行自动脚本生成静态站点并推送到个人主页仓库完成发布。 这套流程已经很流畅，但还有一些改进空间：我们可以使用 GitHub Actions，在每次向远程的项目仓库推送原始内容更改时自动执行第 2 步进行发布。 GitHub 上有许多这类自动化部署任务的开源 Actions 项目，我们选择了其中一个简单易用的 GitHub Actions for Hugo。具体的操作步骤截图和详细配置项可以查看该项目的 README。下面简单介绍下配置过程： 点击上面 Actions \u003e New workflow 按钮，直接将以下文件贴进去，修改仓库名和域名即可。 name:Deploy Hugo Site to Github Pages on Main Branchon:push:branches:- main # Set a branch to deployjobs:build-deploy:runs-on:ubuntu-latest # 镜像steps:- name:checkout # 步骤声明，可省略uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'latest'extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}# 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名external_repository:goatup/goatup.github.io # Pages 远程仓库 CNAME:zhongyang.online # custom domain，换成自己的域名keep_files:false# remove existing filespublish_dir:./public# 发布文件夹publish_branch:main # deploying branchcommit_message:${{ github.event.head_commit.message }} ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:5:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"测试阶段 ​ 如果你觉得满意没问题之后，可以试着推送文章到 Github 找找 bug： git add .git commit -m \"first commit\"git push -u origin mian # 2021年之前的文章大部分使用 master，不冲突 ​ 因为 Github Actions 执行需要一分钟，看到 goatup.github.io.source 的灯变绿，就 OK 了。自此，搭建就结束了。我们可以访问 Github 为 goatup.github.io 仓库生成的域名： https://goatup.github.io 查看效果 附带一份 deploy.bat @echo off set pan=.\\public\\ set repo=https://github.com/goatup/goatup.github.io.source.git set branch=main if exist %pan% ( echo \"clean public directory\" rd /S /Q %pan% echo \"Hugo again for new site\" hugo ) else ( echo \"can not find public directory\" echo \"Hugo again for new site\" hugo ) if exist %pan% ( ::cd %pan% echo \"git commit and push\" ::git init git add . git commit -m \"update site at %time%\" echo \"set remote repository and push forcely\" ::git remote add origin %repo% git push -f origin main:main -v ) else ( echo \"can not find public directory, hugo fail!\" ) pause ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:6:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"个人体验 ​ 由于沉迷于挑选主题不能自拔，断断续续的花了一天才把博客上线。咱说实话，hugo 是真没 hexo 的主题多（不能说丑，也就是不好看），最终选的这个还是个烂尾的家伙。不过啊，这速度，快是真快，go 也是真香。估计也就是把自动推送和域名部署完成后，热情就凉凉了。岁月静好！上班摸鱼！两个字，真TM舒服。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:7:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"参考 ​ GitHub博客绑定自定义域名 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:8:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["MIS"],"content":"一些管理信息系统介绍。 ","date":"2021-06-25","objectID":"/oa-system/:0:0","tags":["OA"],"title":"OA System","uri":"/oa-system/"},{"categories":["MIS"],"content":"Office Automation 网络和OA软件构建的一个单位内部办公平台，用于辅助办公。 ","date":"2021-06-25","objectID":"/oa-system/:1:0","tags":["OA"],"title":"OA System","uri":"/oa-system/"},{"categories":["MIS"],"content":"OA主要应用范围 构建内部通讯平台 如：通知、公告 实现事务处理自动化 变革单位传统纸质公文办公模式 实现文档管理自动化 通过电子文件柜实现文档保存，按权限进行使用和共享 分布式办公 OA分为两大类：一类是IBM的Lotus Notes、Microsoft的Exchange专用软件构成；一类是使用Web技术(Java/.net/php)基于B/C方式开发。 ","date":"2021-06-25","objectID":"/oa-system/:1:1","tags":["OA"],"title":"OA System","uri":"/oa-system/"},{"categories":["MIS"],"content":"OA系统本质是什么？ OA系统的本质在于管理。一个良好经营的企业应当重视五大要素：成本、效率、规范、执行力和决策。 ","date":"2021-06-25","objectID":"/oa-system/:1:2","tags":["OA"],"title":"OA System","uri":"/oa-system/"},{"categories":["MIS"],"content":"OA系统对企业来说有哪些价值？ OA系统对企业的价值主要在于成本和效率。 ","date":"2021-06-25","objectID":"/oa-system/:1:3","tags":["OA"],"title":"OA System","uri":"/oa-system/"},{"categories":["MIS"],"content":"OA流程 申请、审核、审批、驳回、撤回、归档 财务类 差旅费报销、发票开具、项目资金申请、款项收入 人事管理类 人事变动、招聘表、转正申请、培训审核表、离职申请 行政事务类 办公用品申请、车辆申请、请假申请、出差申请、加班申请、奖惩 业务相关类 订单、采购、质量和问题处理、业务招待 客户管理类 客户资料、客户投诉、退货处理、产品故障处理、商机 ","date":"2021-06-25","objectID":"/oa-system/:1:4","tags":["OA"],"title":"OA System","uri":"/oa-system/"},{"categories":["Excel"],"content":"为毛线日本人这么喜欢 Excel，去他娘的 VBA。 ","date":"2021-06-24","objectID":"/cell-style/:0:0","tags":["Cell Style"],"title":"Cell Style","uri":"/cell-style/"},{"categories":["Excel"],"content":"单元格样式 设置Excel中的一个或多个单元格甚至是一个区域的或者是被选中单元格的左对齐、友对齐、居中对齐、字体、字号、字型等属性。 ①左对齐、右对齐、居中对齐 '选择区域或单元格右对齐　Selection.HorizontalAlignment = Excel.xlRight '选择区域或单元格左对齐 Selection.HorizontalAlignment = Excel.xlLeft '选择区域或单元格居中对齐　Selection.HorizontalAlignment = Excel.xlCenter '固定区域的对齐方式的代码： Range(\"A1:A9\").HorizontalAlignment = Excel.xlLeft ②字体、字号、字型 '当前单元格字体为粗体 Selection.Font.Bold = True '当前单元格字体为斜体 Selection.Font.Italic = True '当前单元格字体为宋体20号字 With Selection.Font .Name = \"宋体\" .Size = 20 End With 　","date":"2021-06-24","objectID":"/cell-style/:1:0","tags":["Cell Style"],"title":"Cell Style","uri":"/cell-style/"},{"categories":["Niche"],"content":"一个来自乌拉圭公司开发的低代码开发平台。 ","date":"2021-06-09","objectID":"/genexus/:0:0","tags":["Genexus"],"title":"GeneXus","uri":"/genexus/"},{"categories":["Niche"],"content":"劝退指南 根据产品介绍的说法大致是：传统的开发过程是定义好产品后就开始分小组进行代码开发，有 H5 小组负责网页的开发，有安卓组和 IOS 组负责移动端 app 的开发，于是乎这样就特别麻烦，所以 Genexus 就提供了这么一个低代码的开发平台，基础框架帮你搭好，让你在其上开发代码会更便捷更方便，包括移动端开发都会有自己的工具帮助开发。 启动好了之后的界面长这样：License 是收费的，贼鸡儿贵，一年大概2w多刀，但 License 是兼容向下版本的，只是一旦过期连界面都打不开。 对于 Genexus 来说知识库就是他的项目，Genexus 一般推荐与 SQL Server 搭配，当然其他数据库也可以。然后就是选择环境，可以选择 C# 也可以选择 .net，这个选择和你所要写的语言没有很大关系，因为自始至终 Genexus 都有一套自己的语言，你必须遵照它的结构和语法去编写；这里就引出了一个极为头疼的问题，Genexus 的中文资料实在是少之又少，甚至连中文API文档都没有，英文wiki社区什么的也是内容稀少，想从官方API文档中寻找更是困难重重（感觉组织得并不很好），这对于一个新接触这个软件的人来说确实十分焦急和恼火，还有更多千奇百怪的bug是无从下手的，这个时候就只有靠 Genexus 销售方提供的技术支持群内的技术人员帮助解答或者远程协助，但是这样确实是很麻烦。 Genexus 中的界面模板由插件 workWithPlus 提供，里面提供了一些内置的前端展示模板，但是很多设置还是很繁琐而且不够灵活，主要的问题是如果想要完全自己画一个界面出来就会非常麻烦，它采用“所见即所得”的方式来绘制界面，但是操作起来真的无比麻烦，各种属性的设置和启用能让你怀疑人生。后来我想着我先运行出来，在浏览器中直接写CSS然后返回去改总行了吧，但是对不起，Genexus 中的 CSS 设置好像和浏览器中的 CSS 设置不一样，上述方法完全行不通，这就十分崩溃了，一个简单的界面用 Genexus 根本难以绘出跟别说还有动态加载的问题了。 Genexus 中进行移动端app开发需要用到另一个插件貌似叫 smartDevice，然后你就会继续孤独的和 bug 作斗争。 总而言之这个所谓的“低代码平台”的本意就是想把一些繁琐重复性的框架帮你抽离出来，让我们可以投入更多的精力去书写有关逻辑的代码，但是这点本身就有利有弊，Genexus 的封装程度过高，导致很多地方操作十分不灵活，很难让我们发挥我们自己的想法，只能照着它的模板一步一步走，甚至都不敢随意乱动，不然出了莫名其妙的bug都不知道怎么解决。由于封装程度过高，所以使得它不适合与初学者，初学者连一些编程或者网络的基础知识都没掌握，虽然看起来从Genexus 入手好像更简单一点，学起来快一点，但是他们会在很多地方卡壳，因为他们不明白为什么需要这样做，一条链路的一个小环节没有搞清楚那之后的就会更加稀里糊涂。所以个人觉得小白同学还是先好好学一些基础知识再来学习，而且感觉 Genexus 更适合自由职业者或个人全栈开发工程师。 Genexus 在中国的市场其实也并不是很大，所以中文资料少之又少，这种情况下英文原生文档和社区又不强劲的情况下孤勇使用 Genexus 的学习曲线想必是很艰难的。况且 Genexus 内部使用自己的语言，这就意味着使用它就必须再掌握一门编程语言，相信这是很多程序员都比较讨厌的事情，况且国内不论是大厂还是小公司，使用 Genexus 的都很少，跟别说它自己的内部语言了，所以这个学习成本和回报是需要自己去掂量一下的。 ","date":"2021-06-09","objectID":"/genexus/:1:0","tags":["Genexus"],"title":"GeneXus","uri":"/genexus/"},{"categories":["Niche"],"content":"环境配置 JDK：Java 开发用 Tomcat：Java 开发用 SQL Server：安装genexus 必须环境 SQL Server Management Studio (SSMS)：可选 GeneXus WorkWithPlus：与GeneXus 对应版本 PostgreSQL Tip：PostgreSQL13 和GeneXus15U10 不匹配，降为PostgreSQL12 即可 ","date":"2021-06-09","objectID":"/genexus/:2:0","tags":["Genexus"],"title":"GeneXus","uri":"/genexus/"},{"categories":["Niche"],"content":"项目迁移 1、Model：C盘根目录，全拷贝即可，并修改knowledgebase.connection 地址属性 2、SQL Server Management Studio (SSMS)：将项目文件附加到数据库命令行界面，执行genexus /install 3、UserControls：在**/GeneXus15/UserControls，全拷贝即可 4、pgAdmin4：Postgresql的图形化管理工具，用以备份和恢复Tip：如果报错pg_restore.exe file not found，修改File→Preferences→Path→Binary Path为C:\\Program Files\\PostgreSQL\\12\\bin 5、可直接拷贝Tomcat/webapps 目录中项目文件以减少编译时间 ","date":"2021-06-09","objectID":"/genexus/:3:0","tags":["Genexus"],"title":"GeneXus","uri":"/genexus/"},{"categories":["Niche"],"content":"日常报错 首先确认【本地服务】有木有启动，按WIN + r 后键入services.msc 可见 Tip：Apache Tomcat 8.5、postgresql-x64-12、SQL Server (SQLEXPRESS) ","date":"2021-06-09","objectID":"/genexus/:4:0","tags":["Genexus"],"title":"GeneXus","uri":"/genexus/"},{"categories":["Windows"],"content":"保存一些 Windows 上的问题解决方法和小技巧，避免忘记。 ","date":"2021-06-09","objectID":"/windows-tips/:0:0","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"},{"categories":["Windows"],"content":"软件类 ","date":"2021-06-09","objectID":"/windows-tips/:1:0","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"},{"categories":["Windows"],"content":"Tomcat Java 定期会收到 update 通知，如果更新需在 Tomcat 端及时更正 jre 环境，否则会发生错误。 ローカルコンピュータで Apache Tomcat8.5 Tomcat8 を開始できませんでした。詳細情報はシステムイベントログを参照してください。これがMicrosoft以外のサービスである場合は、サービスの製造元に問い合わせてください。その際、サービス固有のエラー コードが 1 であることを伝えてください。 解决方法： 启动 C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\bin\\Tomcat8w.exe ，将 java 目录下的 Java Virtual Machine 环境更正为最新版。 ","date":"2021-06-09","objectID":"/windows-tips/:1:1","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"},{"categories":["Windows"],"content":"服务类 操作方法：Cortana搜索框输入\"Services\"打开\"サービス\" ","date":"2021-06-09","objectID":"/windows-tips/:2:0","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"},{"categories":["Windows"],"content":"SysMain 原为Superfetch超级预读服务，将多余的物理内存作为缓存使用，对软件进行预加载操作，导致内存占用增大，延长开机时间。 对于经常不关机或者睡眠模式的，个人推荐使用，当系统启动变慢得无法忍受时，可以清空一下：C:\\Windows\\Prefetch*.pf 文件 而对于经常开关机的，建议关闭 ","date":"2021-06-09","objectID":"/windows-tips/:2:1","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"},{"categories":["Windows"],"content":"Windows Search 这是为Windows提供搜索索引的服务，可以下载安装everything替代，建议关闭 ","date":"2021-06-09","objectID":"/windows-tips/:2:2","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"},{"categories":["Windows"],"content":"Connected User Experiences and Telemetry 这是后台自动收集错误及系统崩溃信息的服务，普通用户用不着，建议关闭 ","date":"2021-06-09","objectID":"/windows-tips/:2:3","tags":["Tips","Tomcat"],"title":"WindowsTips","uri":"/windows-tips/"}]